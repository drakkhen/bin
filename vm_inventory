#!/usr/bin/env python3

import json
import os
import re
import socket
import subprocess

DOMAIN = 'vm'

def grouping_of_vmx(vmx):
    # This is meant to be a very generic grouping of OS types (i.e., linux,
    # macOS, Windows, ..). You should use ansible_facts for more granular
    # categorization.
    guestos = ''
    for l in open(vmx, 'r').readlines():
        m = re.search(r'^guestOS\s*=\s*"?([^"]+)"?', l, re.I)
        if m: guestos = m.group(1)

    # There are many potential values, and we only care about a select few.
    # See the full enum here: https://vmware.github.io/vsphere-automation-sdk-java/vsphere/6.5.0/vsphereautomation-client-sdk/com/vmware/vcenter/vm/GuestOS.Values.html
    if re.search(r'CENTOS|DEBIAN|FEDORA|LINUX|MANDRAKE|REDHAT|RHEL|SUSE|UBUNTU', guestos, re.I):
        return 'linux'
    elif re.search(r'BSD', guestos, re.I):
        return 'bsd'
    elif re.search(r'DARWIN', guestos, re.I):
        return 'macos'
    elif re.search(r'SOLARIS', guestos, re.I):
        return 'unix'
    elif re.search(r'WIN(_|DOWS)', guestos, re.I):
        return 'windows'
    else:
        return 'unknown'

def ip_of_vmx(vmx):
    p = subprocess.run(['vmrun', 'getGuestIpAddress', vmx], capture_output=True)
    ip = p.stdout.splitlines()[0].decode('utf8')
    try:
        socket.inet_aton(ip)
        return ip
    except socket.error:
        return None

def hostname_of_ip(given_ip):
    lease_path = '/usr/local/var/lib/misc/dnsmasq/dnsmasq.leases'
    for l in open(lease_path, 'r').readlines():
        expiry, mac, ip, hname, client_id = l.split()
        if ip == given_ip:
            return "%s.%s" % (hname, DOMAIN)
    return None

def vms():
    p = subprocess.run(['vmrun', 'list'], capture_output=True)
    for vmx in p.stdout.splitlines():
        vmx = vmx.decode('utf-8')
        if vmx.startswith('Total running VMs:'):
            continue

        ip = ip_of_vmx(vmx)
        grouping = grouping_of_vmx(vmx)
        hostname = hostname_of_ip(ip)

        filename = os.path.basename(vmx)
        is_base_instance = filename.startswith('_')

        yield {
            'vmx': vmx,
            'ip': ip,
            'hostname': hostname,
            'grouping': grouping,
            'is_base_instance': is_base_instance
        }


if __name__ == '__main__':
    res = { '_meta': {} }

    for vm in vms():
        identifier = vm['hostname'] or vm['ip']
        k = vm['grouping']
        if vm['is_base_instance']:
            k += '_base'

        if not k in res:  res[k] = []
        res[k].append(identifier)

    print(json.dumps(res))
